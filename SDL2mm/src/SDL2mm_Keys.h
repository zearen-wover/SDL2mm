#ifndef _SDL2MM_KEYS_H
#define _SDL2MM_KEYS_H

#include "SDL2mm.h"

namespace SDL2 {
	namespace Keycodes {
	enum KeycodeEnum {
		UNKNOWN = SDLK_UNKNOWN,
		RETURN = SDLK_RETURN,
		ESCAPE = SDLK_ESCAPE,
		BACKSPACE = SDLK_BACKSPACE,
		TAB = SDLK_TAB,
		SPACE = SDLK_SPACE,
		EXCLAIM = SDLK_EXCLAIM,
		QUOTEDBL = SDLK_QUOTEDBL,
		HASH = SDLK_HASH,
		PERCENT = SDLK_PERCENT,
		DOLLAR = SDLK_DOLLAR,
		AMPERSAND = SDLK_AMPERSAND,
		QUOTE = SDLK_QUOTE,
		LEFTPAREN = SDLK_LEFTPAREN,
		RIGHTPAREN = SDLK_RIGHTPAREN,
		ASTERISK = SDLK_ASTERISK,
		PLUS = SDLK_PLUS,
		COMMA = SDLK_COMMA,
		MINUS = SDLK_MINUS,
		PERIOD = SDLK_PERIOD,
		SLASH = SDLK_SLASH,
		KEY_0 = SDLK_0,
		KEY_1 = SDLK_1,
		KEY_2 = SDLK_2,
		KEY_3 = SDLK_3,
		KEY_4 = SDLK_4,
		KEY_5 = SDLK_5,
		KEY_6 = SDLK_6,
		KEY_7 = SDLK_7,
		KEY_8 = SDLK_8,
		KEY_9 = SDLK_9,
		COLON = SDLK_COLON,
		SEMICOLON = SDLK_SEMICOLON,
		LESS = SDLK_LESS,
		EQUALS = SDLK_EQUALS,
		GREATER = SDLK_GREATER,
		QUESTION = SDLK_QUESTION,
		AT = SDLK_AT,
		LEFTBRACKET = SDLK_LEFTBRACKET,
		BACKSLASH = SDLK_BACKSLASH,
		RIGHTBRACKET = SDLK_RIGHTBRACKET,
		CARET = SDLK_CARET,
		UNDERSCORE = SDLK_UNDERSCORE,
		BACKQUOTE = SDLK_BACKQUOTE,
		a = SDLK_a,
		b = SDLK_b,
		c = SDLK_c,
		d = SDLK_d,
		e = SDLK_e,
		f = SDLK_f,
		g = SDLK_g,
		h = SDLK_h,
		i = SDLK_i,
		j = SDLK_j,
		k = SDLK_k,
		l = SDLK_l,
		m = SDLK_m,
		n = SDLK_n,
		o = SDLK_o,
		p = SDLK_p,
		q = SDLK_q,
		r = SDLK_r,
		s = SDLK_s,
		t = SDLK_t,
		u = SDLK_u,
		v = SDLK_v,
		w = SDLK_w,
		x = SDLK_x,
		y = SDLK_y,
		z = SDLK_z,
		CAPSLOCK = SDLK_CAPSLOCK,
		F1 = SDLK_F1,
		F2 = SDLK_F2,
		F3 = SDLK_F3,
		F4 = SDLK_F4,
		F5 = SDLK_F5,
		F6 = SDLK_F6,
		F7 = SDLK_F7,
		F8 = SDLK_F8,
		F9 = SDLK_F9,
		F10 = SDLK_F10,
		F11 = SDLK_F11,
		F12 = SDLK_F12,
		PRINTSCREEN = SDLK_PRINTSCREEN,
		SCROLLLOCK = SDLK_SCROLLLOCK,
		PAUSE = SDLK_PAUSE,
		INSERT = SDLK_INSERT,
		HOME = SDLK_HOME,
		PAGEUP = SDLK_PAGEUP,
		DELETE = SDLK_DELETE,
		END = SDLK_END,
		PAGEDOWN = SDLK_PAGEDOWN,
		RIGHT = SDLK_RIGHT,
		LEFT = SDLK_LEFT,
		DOWN = SDLK_DOWN,
		UP = SDLK_UP,
		NUMLOCKCLEAR = SDLK_NUMLOCKCLEAR,
		APPLICATION = SDLK_APPLICATION,
		POWER = SDLK_POWER,
		F13 = SDLK_F13,
		F14 = SDLK_F14,
		F15 = SDLK_F15,
		F16 = SDLK_F16,
		F17 = SDLK_F17,
		F18 = SDLK_F18,
		F19 = SDLK_F19,
		F20 = SDLK_F20,
		F21 = SDLK_F21,
		F22 = SDLK_F22,
		F23 = SDLK_F23,
		F24 = SDLK_F24,
		EXECUTE = SDLK_EXECUTE,
		HELP = SDLK_HELP,
		MENU = SDLK_MENU,
		SELECT = SDLK_SELECT,
		STOP = SDLK_STOP,
		AGAIN = SDLK_AGAIN,
		UNDO = SDLK_UNDO,
		CUT = SDLK_CUT,
		COPY = SDLK_COPY,
		PASTE = SDLK_PASTE,
		FIND = SDLK_FIND,
		MUTE = SDLK_MUTE,
		VOLUMEUP = SDLK_VOLUMEUP,
		VOLUMEDOWN = SDLK_VOLUMEDOWN,
		ALTERASE = SDLK_ALTERASE,
		SYSREQ = SDLK_SYSREQ,
		CANCEL = SDLK_CANCEL,
		CLEAR = SDLK_CLEAR,
		PRIOR = SDLK_PRIOR,
		RETURN2 = SDLK_RETURN2,
		SEPARATOR = SDLK_SEPARATOR,
		OUT = SDLK_OUT,
		OPER = SDLK_OPER,
		CLEARAGAIN = SDLK_CLEARAGAIN,
		CRSEL = SDLK_CRSEL,
		EXSEL = SDLK_EXSEL,
		THOUSANDSSEPARATOR = SDLK_THOUSANDSSEPARATOR,
		DECIMALSEPARATOR = SDLK_DECIMALSEPARATOR,
		CURRENCYUNIT = SDLK_CURRENCYUNIT,
		CURRENCYSUBUNIT = SDLK_CURRENCYSUBUNIT,
		LCTRL = SDLK_LCTRL,
		LSHIFT = SDLK_LSHIFT,
		LALT = SDLK_LALT,
		LGUI = SDLK_LGUI,
		RCTRL = SDLK_RCTRL,
		RSHIFT = SDLK_RSHIFT,
		RALT = SDLK_RALT,
		RGUI = SDLK_RGUI,
		MODE = SDLK_MODE,
		AUDIONEXT = SDLK_AUDIONEXT,
		AUDIOPREV = SDLK_AUDIOPREV,
		AUDIOSTOP = SDLK_AUDIOSTOP,
		AUDIOPLAY = SDLK_AUDIOPLAY,
		AUDIOMUTE = SDLK_AUDIOMUTE,
		MEDIASELECT = SDLK_MEDIASELECT,
		WWW = SDLK_WWW,
		MAIL = SDLK_MAIL,
		CALCULATOR = SDLK_CALCULATOR,
		COMPUTER = SDLK_COMPUTER,
		BRIGHTNESSDOWN = SDLK_BRIGHTNESSDOWN,
		BRIGHTNESSUP = SDLK_BRIGHTNESSUP,
		DISPLAYSWITCH = SDLK_DISPLAYSWITCH,
		KBDILLUMTOGGLE = SDLK_KBDILLUMTOGGLE,
		KBDILLUMDOWN = SDLK_KBDILLUMDOWN,
		KBDILLUMUP = SDLK_KBDILLUMUP,
		EJECT = SDLK_EJECT,
		SLEEP = SDLK_SLEEP,
	};}
	typedef Keycodes::KeycodeEnum EKeycode;

	namespace Scancodes {
	enum ScancodeEnum {
		UNKNOWN = SDL_SCANCODE_UNKNOWN,
		A = SDL_SCANCODE_A,
		B = SDL_SCANCODE_B,
		C = SDL_SCANCODE_C,
		D = SDL_SCANCODE_D,
		E = SDL_SCANCODE_E,
		F = SDL_SCANCODE_F,
		G = SDL_SCANCODE_G,
		H = SDL_SCANCODE_H,
		I = SDL_SCANCODE_I,
		J = SDL_SCANCODE_J,
		K = SDL_SCANCODE_K,
		L = SDL_SCANCODE_L,
		M = SDL_SCANCODE_M,
		N = SDL_SCANCODE_N,
		O = SDL_SCANCODE_O,
		P = SDL_SCANCODE_P,
		Q = SDL_SCANCODE_Q,
		R = SDL_SCANCODE_R,
		S = SDL_SCANCODE_S,
		T = SDL_SCANCODE_T,
		U = SDL_SCANCODE_U,
		V = SDL_SCANCODE_V,
		W = SDL_SCANCODE_W,
		X = SDL_SCANCODE_X,
		Y = SDL_SCANCODE_Y,
		Z = SDL_SCANCODE_Z,
		KEY_1 = SDL_SCANCODE_1,
		KEY_2 = SDL_SCANCODE_2,
		KEY_3 = SDL_SCANCODE_3,
		KEY_4 = SDL_SCANCODE_4,
		KEY_5 = SDL_SCANCODE_5,
		KEY_6 = SDL_SCANCODE_6,
		KEY_7 = SDL_SCANCODE_7,
		KEY_8 = SDL_SCANCODE_8,
		KEY_9 = SDL_SCANCODE_9,
		KEY_0 = SDL_SCANCODE_0,
		RETURN = SDL_SCANCODE_RETURN,
		ESCAPE = SDL_SCANCODE_ESCAPE,
		BACKSPACE = SDL_SCANCODE_BACKSPACE,
		TAB = SDL_SCANCODE_TAB,
		SPACE = SDL_SCANCODE_SPACE,
		MINUS = SDL_SCANCODE_MINUS,
		EQUALS = SDL_SCANCODE_EQUALS,
		LEFTBRACKET = SDL_SCANCODE_LEFTBRACKET,
		RIGHTBRACKET = SDL_SCANCODE_RIGHTBRACKET,
		BACKSLASH = SDL_SCANCODE_BACKSLASH,
		NONUSHASH = SDL_SCANCODE_NONUSHASH,
		SEMICOLON = SDL_SCANCODE_SEMICOLON,
		APOSTROPHE = SDL_SCANCODE_APOSTROPHE,
		GRAVE = SDL_SCANCODE_GRAVE,
		COMMA = SDL_SCANCODE_COMMA,
		PERIOD = SDL_SCANCODE_PERIOD,
		SLASH = SDL_SCANCODE_SLASH,
		CAPSLOCK = SDL_SCANCODE_CAPSLOCK,
		F1 = SDL_SCANCODE_F1,
		F2 = SDL_SCANCODE_F2,
		F3 = SDL_SCANCODE_F3,
		F4 = SDL_SCANCODE_F4,
		F5 = SDL_SCANCODE_F5,
		F6 = SDL_SCANCODE_F6,
		F7 = SDL_SCANCODE_F7,
		F8 = SDL_SCANCODE_F8,
		F9 = SDL_SCANCODE_F9,
		F10 = SDL_SCANCODE_F10,
		F11 = SDL_SCANCODE_F11,
		F12 = SDL_SCANCODE_F12,
		PRINTSCREEN = SDL_SCANCODE_PRINTSCREEN,
		SCROLLLOCK = SDL_SCANCODE_SCROLLLOCK,
		PAUSE = SDL_SCANCODE_PAUSE,
		INSERT = SDL_SCANCODE_INSERT,
		HOME = SDL_SCANCODE_HOME,
		PAGEUP = SDL_SCANCODE_PAGEUP,
		DELETE = SDL_SCANCODE_DELETE,
		END = SDL_SCANCODE_END,
		PAGEDOWN = SDL_SCANCODE_PAGEDOWN,
		RIGHT = SDL_SCANCODE_RIGHT,
		LEFT = SDL_SCANCODE_LEFT,
		DOWN = SDL_SCANCODE_DOWN,
		UP = SDL_SCANCODE_UP,
		NUMLOCKCLEAR = SDL_SCANCODE_NUMLOCKCLEAR,
		NONUSBACKSLASH = SDL_SCANCODE_NONUSBACKSLASH,
		APPLICATION = SDL_SCANCODE_APPLICATION,
		POWER = SDL_SCANCODE_POWER,
		F13 = SDL_SCANCODE_F13,
		F14 = SDL_SCANCODE_F14,
		F15 = SDL_SCANCODE_F15,
		F16 = SDL_SCANCODE_F16,
		F17 = SDL_SCANCODE_F17,
		F18 = SDL_SCANCODE_F18,
		F19 = SDL_SCANCODE_F19,
		F20 = SDL_SCANCODE_F20,
		F21 = SDL_SCANCODE_F21,
		F22 = SDL_SCANCODE_F22,
		F23 = SDL_SCANCODE_F23,
		F24 = SDL_SCANCODE_F24,
		EXECUTE = SDL_SCANCODE_EXECUTE,
		HELP = SDL_SCANCODE_HELP,
		MENU = SDL_SCANCODE_MENU,
		SELECT = SDL_SCANCODE_SELECT,
		STOP = SDL_SCANCODE_STOP,
		AGAIN = SDL_SCANCODE_AGAIN,
		UNDO = SDL_SCANCODE_UNDO,
		CUT = SDL_SCANCODE_CUT,
		COPY = SDL_SCANCODE_COPY,
		PASTE = SDL_SCANCODE_PASTE,
		FIND = SDL_SCANCODE_FIND,
		MUTE = SDL_SCANCODE_MUTE,
		VOLUMEUP = SDL_SCANCODE_VOLUMEUP,
		VOLUMEDOWN = SDL_SCANCODE_VOLUMEDOWN,
		INTERNATIONAL1 = SDL_SCANCODE_INTERNATIONAL1,
		INTERNATIONAL2 = SDL_SCANCODE_INTERNATIONAL2,
		INTERNATIONAL3 = SDL_SCANCODE_INTERNATIONAL3,
		INTERNATIONAL4 = SDL_SCANCODE_INTERNATIONAL4,
		INTERNATIONAL5 = SDL_SCANCODE_INTERNATIONAL5,
		INTERNATIONAL6 = SDL_SCANCODE_INTERNATIONAL6,
		INTERNATIONAL7 = SDL_SCANCODE_INTERNATIONAL7,
		INTERNATIONAL8 = SDL_SCANCODE_INTERNATIONAL8,
		INTERNATIONAL9 = SDL_SCANCODE_INTERNATIONAL9,
		LANG1 = SDL_SCANCODE_LANG1,
		LANG2 = SDL_SCANCODE_LANG2,
		LANG3 = SDL_SCANCODE_LANG3,
		LANG4 = SDL_SCANCODE_LANG4,
		LANG5 = SDL_SCANCODE_LANG5,
		LANG6 = SDL_SCANCODE_LANG6,
		LANG7 = SDL_SCANCODE_LANG7,
		LANG8 = SDL_SCANCODE_LANG8,
		LANG9 = SDL_SCANCODE_LANG9,
		ALTERASE = SDL_SCANCODE_ALTERASE,
		SYSREQ = SDL_SCANCODE_SYSREQ,
		CANCEL = SDL_SCANCODE_CANCEL,
		CLEAR = SDL_SCANCODE_CLEAR,
		PRIOR = SDL_SCANCODE_PRIOR,
		RETURN2 = SDL_SCANCODE_RETURN2,
		SEPARATOR = SDL_SCANCODE_SEPARATOR,
		OUT = SDL_SCANCODE_OUT,
		OPER = SDL_SCANCODE_OPER,
		CLEARAGAIN = SDL_SCANCODE_CLEARAGAIN,
		CRSEL = SDL_SCANCODE_CRSEL,
		EXSEL = SDL_SCANCODE_EXSEL,
		THOUSANDSSEPARATOR = SDL_SCANCODE_THOUSANDSSEPARATOR,
		DECIMALSEPARATOR = SDL_SCANCODE_DECIMALSEPARATOR,
		CURRENCYUNIT = SDL_SCANCODE_CURRENCYUNIT,
		CURRENCYSUBUNIT = SDL_SCANCODE_CURRENCYSUBUNIT,
		LCTRL = SDL_SCANCODE_LCTRL,
		LSHIFT = SDL_SCANCODE_LSHIFT,
		LALT = SDL_SCANCODE_LALT,
		LGUI = SDL_SCANCODE_LGUI,
		RCTRL = SDL_SCANCODE_RCTRL,
		RSHIFT = SDL_SCANCODE_RSHIFT,
		RALT = SDL_SCANCODE_RALT,
		RGUI = SDL_SCANCODE_RGUI,
		MODE = SDL_SCANCODE_MODE,
		AUDIONEXT = SDL_SCANCODE_AUDIONEXT,
		AUDIOPREV = SDL_SCANCODE_AUDIOPREV,
		AUDIOSTOP = SDL_SCANCODE_AUDIOSTOP,
		AUDIOPLAY = SDL_SCANCODE_AUDIOPLAY,
		AUDIOMUTE = SDL_SCANCODE_AUDIOMUTE,
		MEDIASELECT = SDL_SCANCODE_MEDIASELECT,
		WWW = SDL_SCANCODE_WWW,
		MAIL = SDL_SCANCODE_MAIL,
		CALCULATOR = SDL_SCANCODE_CALCULATOR,
		COMPUTER = SDL_SCANCODE_COMPUTER,
		BRIGHTNESSDOWN = SDL_SCANCODE_BRIGHTNESSDOWN,
		BRIGHTNESSUP = SDL_SCANCODE_BRIGHTNESSUP,
		DISPLAYSWITCH = SDL_SCANCODE_DISPLAYSWITCH,
		KBDILLUMTOGGLE = SDL_SCANCODE_KBDILLUMTOGGLE,
		KBDILLUMDOWN = SDL_SCANCODE_KBDILLUMDOWN,
		KBDILLUMUP = SDL_SCANCODE_KBDILLUMUP,
		EJECT = SDL_SCANCODE_EJECT,
		SLEEP = SDL_SCANCODE_SLEEP
	};}
	typedef Scancodes::ScancodeEnum EScancode;

	namespace Modifiers {
	enum ModifierEnum {
		NONE = KMOD_NONE,
		LSHIFT = KMOD_LSHIFT,
		RSHIFT = KMOD_RSHIFT,
		LCTRL = KMOD_LCTRL,
		RCTRL = KMOD_RCTRL,
		LALT = KMOD_LALT,
		RALT = KMOD_RALT,
		LGUI = KMOD_LGUI,
		RGUI = KMOD_RGUI,
		NUM = KMOD_NUM,
		CAPS = KMOD_CAPS,
		MODE = KMOD_MODE,
		RESERVED = KMOD_RESERVED,

		SHIFT = LSHIFT | RSHIFT,
		CTRL = LCTRL | RCTRL,
		ALT = LALT | RALT,
		GUI = LGUI | RGUI
	};}
	typedef Modifiers::ModifierEnum EModifier;

	class Modifier {
	private:
		Uint16 mod;
	public:
		Modifier();
		Modifier(Uint16 initMod);
		Modifier(Modifier& toCopy);

		bool has(EModifier modifier);

		void set(EModifier modifier);

		void unset(EModifier modifier);
	};


	class KeySym {
	private:
		SDL_Keysym keySym;

	public:
		KeySym();
		KeySym(SDL_Keysym initKeySym);
		KeySym(KeySym& toCopy);

		EScancode scancode();

		EKeycode keycode();

		Modifier modifier();
	};
}

#endif
